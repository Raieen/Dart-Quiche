// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int __bswap_16(
    int __bsx,
  ) {
    ___bswap_16 ??=
        _dylib.lookupFunction<_c___bswap_16, _dart___bswap_16>('__bswap_16');
    return ___bswap_16(
      __bsx,
    );
  }

  _dart___bswap_16 ___bswap_16;

  int __bswap_32(
    int __bsx,
  ) {
    ___bswap_32 ??=
        _dylib.lookupFunction<_c___bswap_32, _dart___bswap_32>('__bswap_32');
    return ___bswap_32(
      __bsx,
    );
  }

  _dart___bswap_32 ___bswap_32;

  int __bswap_64(
    int __bsx,
  ) {
    ___bswap_64 ??=
        _dylib.lookupFunction<_c___bswap_64, _dart___bswap_64>('__bswap_64');
    return ___bswap_64(
      __bsx,
    );
  }

  _dart___bswap_64 ___bswap_64;

  int __uint16_identity(
    int __x,
  ) {
    ___uint16_identity ??=
        _dylib.lookupFunction<_c___uint16_identity, _dart___uint16_identity>(
            '__uint16_identity');
    return ___uint16_identity(
      __x,
    );
  }

  _dart___uint16_identity ___uint16_identity;

  int __uint32_identity(
    int __x,
  ) {
    ___uint32_identity ??=
        _dylib.lookupFunction<_c___uint32_identity, _dart___uint32_identity>(
            '__uint32_identity');
    return ___uint32_identity(
      __x,
    );
  }

  _dart___uint32_identity ___uint32_identity;

  int __uint64_identity(
    int __x,
  ) {
    ___uint64_identity ??=
        _dylib.lookupFunction<_c___uint64_identity, _dart___uint64_identity>(
            '__uint64_identity');
    return ___uint64_identity(
      __x,
    );
  }

  _dart___uint64_identity ___uint64_identity;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    _select ??= _dylib.lookupFunction<_c_select, _dart_select>('select');
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  _dart_select _select;

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    _pselect ??= _dylib.lookupFunction<_c_pselect, _dart_pselect>('pselect');
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  _dart_pselect _pselect;

  ffi.Pointer<ffi.Int8> quiche_version() {
    _quiche_version ??=
        _dylib.lookupFunction<_c_quiche_version, _dart_quiche_version>(
            'quiche_version');
    return _quiche_version();
  }

  _dart_quiche_version _quiche_version;

  int quiche_enable_debug_logging(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> cb,
    ffi.Pointer<ffi.Void> argp,
  ) {
    _quiche_enable_debug_logging ??= _dylib.lookupFunction<
        _c_quiche_enable_debug_logging,
        _dart_quiche_enable_debug_logging>('quiche_enable_debug_logging');
    return _quiche_enable_debug_logging(
      cb,
      argp,
    );
  }

  _dart_quiche_enable_debug_logging _quiche_enable_debug_logging;

  ffi.Pointer<Config> quiche_config_new(
    int version,
  ) {
    _quiche_config_new ??=
        _dylib.lookupFunction<_c_quiche_config_new, _dart_quiche_config_new>(
            'quiche_config_new');
    return _quiche_config_new(
      version,
    );
  }

  _dart_quiche_config_new _quiche_config_new;

  int quiche_config_load_cert_chain_from_pem_file(
    ffi.Pointer<Config> config,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _quiche_config_load_cert_chain_from_pem_file ??= _dylib.lookupFunction<
            _c_quiche_config_load_cert_chain_from_pem_file,
            _dart_quiche_config_load_cert_chain_from_pem_file>(
        'quiche_config_load_cert_chain_from_pem_file');
    return _quiche_config_load_cert_chain_from_pem_file(
      config,
      path,
    );
  }

  _dart_quiche_config_load_cert_chain_from_pem_file
      _quiche_config_load_cert_chain_from_pem_file;

  int quiche_config_load_priv_key_from_pem_file(
    ffi.Pointer<Config> config,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _quiche_config_load_priv_key_from_pem_file ??= _dylib.lookupFunction<
            _c_quiche_config_load_priv_key_from_pem_file,
            _dart_quiche_config_load_priv_key_from_pem_file>(
        'quiche_config_load_priv_key_from_pem_file');
    return _quiche_config_load_priv_key_from_pem_file(
      config,
      path,
    );
  }

  _dart_quiche_config_load_priv_key_from_pem_file
      _quiche_config_load_priv_key_from_pem_file;

  void quiche_config_verify_peer(
    ffi.Pointer<Config> config,
    bool v,
  ) {
    _quiche_config_verify_peer ??= _dylib.lookupFunction<
        _c_quiche_config_verify_peer,
        _dart_quiche_config_verify_peer>('quiche_config_verify_peer');
    return _quiche_config_verify_peer(
      config,
      v ? 1 : 0,
    );
  }

  _dart_quiche_config_verify_peer _quiche_config_verify_peer;

  void quiche_config_grease(
    ffi.Pointer<Config> config,
    bool v,
  ) {
    _quiche_config_grease ??= _dylib.lookupFunction<_c_quiche_config_grease,
        _dart_quiche_config_grease>('quiche_config_grease');
    return _quiche_config_grease(
      config,
      v ? 1 : 0,
    );
  }

  _dart_quiche_config_grease _quiche_config_grease;

  void quiche_config_log_keys(
    ffi.Pointer<Config> config,
  ) {
    _quiche_config_log_keys ??= _dylib.lookupFunction<_c_quiche_config_log_keys,
        _dart_quiche_config_log_keys>('quiche_config_log_keys');
    return _quiche_config_log_keys(
      config,
    );
  }

  _dart_quiche_config_log_keys _quiche_config_log_keys;

  void quiche_config_enable_early_data(
    ffi.Pointer<Config> config,
  ) {
    _quiche_config_enable_early_data ??= _dylib.lookupFunction<
            _c_quiche_config_enable_early_data,
            _dart_quiche_config_enable_early_data>(
        'quiche_config_enable_early_data');
    return _quiche_config_enable_early_data(
      config,
    );
  }

  _dart_quiche_config_enable_early_data _quiche_config_enable_early_data;

  int quiche_config_set_application_protos(
    ffi.Pointer<Config> config,
    ffi.Pointer<ffi.Uint8> protos,
    int protos_len,
  ) {
    _quiche_config_set_application_protos ??= _dylib.lookupFunction<
            _c_quiche_config_set_application_protos,
            _dart_quiche_config_set_application_protos>(
        'quiche_config_set_application_protos');
    return _quiche_config_set_application_protos(
      config,
      protos,
      protos_len,
    );
  }

  _dart_quiche_config_set_application_protos
      _quiche_config_set_application_protos;

  void quiche_config_set_max_idle_timeout(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_max_idle_timeout ??= _dylib.lookupFunction<
            _c_quiche_config_set_max_idle_timeout,
            _dart_quiche_config_set_max_idle_timeout>(
        'quiche_config_set_max_idle_timeout');
    return _quiche_config_set_max_idle_timeout(
      config,
      v,
    );
  }

  _dart_quiche_config_set_max_idle_timeout _quiche_config_set_max_idle_timeout;

  void quiche_config_set_max_udp_payload_size(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_max_udp_payload_size ??= _dylib.lookupFunction<
            _c_quiche_config_set_max_udp_payload_size,
            _dart_quiche_config_set_max_udp_payload_size>(
        'quiche_config_set_max_udp_payload_size');
    return _quiche_config_set_max_udp_payload_size(
      config,
      v,
    );
  }

  _dart_quiche_config_set_max_udp_payload_size
      _quiche_config_set_max_udp_payload_size;

  void quiche_config_set_initial_max_data(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_initial_max_data ??= _dylib.lookupFunction<
            _c_quiche_config_set_initial_max_data,
            _dart_quiche_config_set_initial_max_data>(
        'quiche_config_set_initial_max_data');
    return _quiche_config_set_initial_max_data(
      config,
      v,
    );
  }

  _dart_quiche_config_set_initial_max_data _quiche_config_set_initial_max_data;

  void quiche_config_set_initial_max_stream_data_bidi_local(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_initial_max_stream_data_bidi_local ??=
        _dylib.lookupFunction<
                _c_quiche_config_set_initial_max_stream_data_bidi_local,
                _dart_quiche_config_set_initial_max_stream_data_bidi_local>(
            'quiche_config_set_initial_max_stream_data_bidi_local');
    return _quiche_config_set_initial_max_stream_data_bidi_local(
      config,
      v,
    );
  }

  _dart_quiche_config_set_initial_max_stream_data_bidi_local
      _quiche_config_set_initial_max_stream_data_bidi_local;

  void quiche_config_set_initial_max_stream_data_bidi_remote(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_initial_max_stream_data_bidi_remote ??=
        _dylib.lookupFunction<
                _c_quiche_config_set_initial_max_stream_data_bidi_remote,
                _dart_quiche_config_set_initial_max_stream_data_bidi_remote>(
            'quiche_config_set_initial_max_stream_data_bidi_remote');
    return _quiche_config_set_initial_max_stream_data_bidi_remote(
      config,
      v,
    );
  }

  _dart_quiche_config_set_initial_max_stream_data_bidi_remote
      _quiche_config_set_initial_max_stream_data_bidi_remote;

  void quiche_config_set_initial_max_stream_data_uni(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_initial_max_stream_data_uni ??= _dylib.lookupFunction<
            _c_quiche_config_set_initial_max_stream_data_uni,
            _dart_quiche_config_set_initial_max_stream_data_uni>(
        'quiche_config_set_initial_max_stream_data_uni');
    return _quiche_config_set_initial_max_stream_data_uni(
      config,
      v,
    );
  }

  _dart_quiche_config_set_initial_max_stream_data_uni
      _quiche_config_set_initial_max_stream_data_uni;

  void quiche_config_set_initial_max_streams_bidi(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_initial_max_streams_bidi ??= _dylib.lookupFunction<
            _c_quiche_config_set_initial_max_streams_bidi,
            _dart_quiche_config_set_initial_max_streams_bidi>(
        'quiche_config_set_initial_max_streams_bidi');
    return _quiche_config_set_initial_max_streams_bidi(
      config,
      v,
    );
  }

  _dart_quiche_config_set_initial_max_streams_bidi
      _quiche_config_set_initial_max_streams_bidi;

  void quiche_config_set_initial_max_streams_uni(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_initial_max_streams_uni ??= _dylib.lookupFunction<
            _c_quiche_config_set_initial_max_streams_uni,
            _dart_quiche_config_set_initial_max_streams_uni>(
        'quiche_config_set_initial_max_streams_uni');
    return _quiche_config_set_initial_max_streams_uni(
      config,
      v,
    );
  }

  _dart_quiche_config_set_initial_max_streams_uni
      _quiche_config_set_initial_max_streams_uni;

  void quiche_config_set_ack_delay_exponent(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_ack_delay_exponent ??= _dylib.lookupFunction<
            _c_quiche_config_set_ack_delay_exponent,
            _dart_quiche_config_set_ack_delay_exponent>(
        'quiche_config_set_ack_delay_exponent');
    return _quiche_config_set_ack_delay_exponent(
      config,
      v,
    );
  }

  _dart_quiche_config_set_ack_delay_exponent
      _quiche_config_set_ack_delay_exponent;

  void quiche_config_set_max_ack_delay(
    ffi.Pointer<Config> config,
    int v,
  ) {
    _quiche_config_set_max_ack_delay ??= _dylib.lookupFunction<
            _c_quiche_config_set_max_ack_delay,
            _dart_quiche_config_set_max_ack_delay>(
        'quiche_config_set_max_ack_delay');
    return _quiche_config_set_max_ack_delay(
      config,
      v,
    );
  }

  _dart_quiche_config_set_max_ack_delay _quiche_config_set_max_ack_delay;

  void quiche_config_set_disable_active_migration(
    ffi.Pointer<Config> config,
    bool v,
  ) {
    _quiche_config_set_disable_active_migration ??= _dylib.lookupFunction<
            _c_quiche_config_set_disable_active_migration,
            _dart_quiche_config_set_disable_active_migration>(
        'quiche_config_set_disable_active_migration');
    return _quiche_config_set_disable_active_migration(
      config,
      v ? 1 : 0,
    );
  }

  _dart_quiche_config_set_disable_active_migration
      _quiche_config_set_disable_active_migration;

  void quiche_config_set_cc_algorithm(
    ffi.Pointer<Config> config,
    int algo,
  ) {
    _quiche_config_set_cc_algorithm ??= _dylib.lookupFunction<
        _c_quiche_config_set_cc_algorithm,
        _dart_quiche_config_set_cc_algorithm>('quiche_config_set_cc_algorithm');
    return _quiche_config_set_cc_algorithm(
      config,
      algo,
    );
  }

  _dart_quiche_config_set_cc_algorithm _quiche_config_set_cc_algorithm;

  void quiche_config_enable_hystart(
    ffi.Pointer<Config> config,
    bool v,
  ) {
    _quiche_config_enable_hystart ??= _dylib.lookupFunction<
        _c_quiche_config_enable_hystart,
        _dart_quiche_config_enable_hystart>('quiche_config_enable_hystart');
    return _quiche_config_enable_hystart(
      config,
      v ? 1 : 0,
    );
  }

  _dart_quiche_config_enable_hystart _quiche_config_enable_hystart;

  void quiche_config_free(
    ffi.Pointer<Config> config,
  ) {
    _quiche_config_free ??=
        _dylib.lookupFunction<_c_quiche_config_free, _dart_quiche_config_free>(
            'quiche_config_free');
    return _quiche_config_free(
      config,
    );
  }

  _dart_quiche_config_free _quiche_config_free;

  int quiche_header_info(
    ffi.Pointer<ffi.Uint8> buf,
    int buf_len,
    int dcil,
    ffi.Pointer<ffi.Uint32> version,
    ffi.Pointer<ffi.Uint8> type,
    ffi.Pointer<ffi.Uint8> scid,
    ffi.Pointer<ffi.Uint64> scid_len,
    ffi.Pointer<ffi.Uint8> dcid,
    ffi.Pointer<ffi.Uint64> dcid_len,
    ffi.Pointer<ffi.Uint8> token,
    ffi.Pointer<ffi.Uint64> token_len,
  ) {
    _quiche_header_info ??=
        _dylib.lookupFunction<_c_quiche_header_info, _dart_quiche_header_info>(
            'quiche_header_info');
    return _quiche_header_info(
      buf,
      buf_len,
      dcil,
      version,
      type,
      scid,
      scid_len,
      dcid,
      dcid_len,
      token,
      token_len,
    );
  }

  _dart_quiche_header_info _quiche_header_info;

  ffi.Pointer<Connection> quiche_accept(
    ffi.Pointer<ffi.Uint8> scid,
    int scid_len,
    ffi.Pointer<ffi.Uint8> odcid,
    int odcid_len,
    ffi.Pointer<Config> config,
  ) {
    _quiche_accept ??= _dylib
        .lookupFunction<_c_quiche_accept, _dart_quiche_accept>('quiche_accept');
    return _quiche_accept(
      scid,
      scid_len,
      odcid,
      odcid_len,
      config,
    );
  }

  _dart_quiche_accept _quiche_accept;

  ffi.Pointer<Connection> quiche_connect(
    ffi.Pointer<ffi.Int8> server_name,
    ffi.Pointer<ffi.Uint8> scid,
    int scid_len,
    ffi.Pointer<Config> config,
  ) {
    _quiche_connect ??=
        _dylib.lookupFunction<_c_quiche_connect, _dart_quiche_connect>(
            'quiche_connect');
    return _quiche_connect(
      server_name,
      scid,
      scid_len,
      config,
    );
  }

  _dart_quiche_connect _quiche_connect;

  int quiche_negotiate_version(
    ffi.Pointer<ffi.Uint8> scid,
    int scid_len,
    ffi.Pointer<ffi.Uint8> dcid,
    int dcid_len,
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
  ) {
    _quiche_negotiate_version ??= _dylib.lookupFunction<
        _c_quiche_negotiate_version,
        _dart_quiche_negotiate_version>('quiche_negotiate_version');
    return _quiche_negotiate_version(
      scid,
      scid_len,
      dcid,
      dcid_len,
      out,
      out_len,
    );
  }

  _dart_quiche_negotiate_version _quiche_negotiate_version;

  int quiche_retry(
    ffi.Pointer<ffi.Uint8> scid,
    int scid_len,
    ffi.Pointer<ffi.Uint8> dcid,
    int dcid_len,
    ffi.Pointer<ffi.Uint8> new_scid,
    int new_scid_len,
    ffi.Pointer<ffi.Uint8> token,
    int token_len,
    int version,
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
  ) {
    _quiche_retry ??= _dylib
        .lookupFunction<_c_quiche_retry, _dart_quiche_retry>('quiche_retry');
    return _quiche_retry(
      scid,
      scid_len,
      dcid,
      dcid_len,
      new_scid,
      new_scid_len,
      token,
      token_len,
      version,
      out,
      out_len,
    );
  }

  _dart_quiche_retry _quiche_retry;

  bool quiche_version_is_supported(
    int version,
  ) {
    _quiche_version_is_supported ??= _dylib.lookupFunction<
        _c_quiche_version_is_supported,
        _dart_quiche_version_is_supported>('quiche_version_is_supported');
    return _quiche_version_is_supported(
          version,
        ) !=
        0;
  }

  _dart_quiche_version_is_supported _quiche_version_is_supported;

  ffi.Pointer<Connection> quiche_conn_new_with_tls(
    ffi.Pointer<ffi.Uint8> scid,
    int scid_len,
    ffi.Pointer<ffi.Uint8> odcid,
    int odcid_len,
    ffi.Pointer<Config> config,
    ffi.Pointer<ffi.Void> ssl,
    bool is_server,
  ) {
    _quiche_conn_new_with_tls ??= _dylib.lookupFunction<
        _c_quiche_conn_new_with_tls,
        _dart_quiche_conn_new_with_tls>('quiche_conn_new_with_tls');
    return _quiche_conn_new_with_tls(
      scid,
      scid_len,
      odcid,
      odcid_len,
      config,
      ssl,
      is_server ? 1 : 0,
    );
  }

  _dart_quiche_conn_new_with_tls _quiche_conn_new_with_tls;

  bool quiche_conn_set_keylog_path(
    ffi.Pointer<Connection> conn,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _quiche_conn_set_keylog_path ??= _dylib.lookupFunction<
        _c_quiche_conn_set_keylog_path,
        _dart_quiche_conn_set_keylog_path>('quiche_conn_set_keylog_path');
    return _quiche_conn_set_keylog_path(
          conn,
          path,
        ) !=
        0;
  }

  _dart_quiche_conn_set_keylog_path _quiche_conn_set_keylog_path;

  void quiche_conn_set_keylog_fd(
    ffi.Pointer<Connection> conn,
    int fd,
  ) {
    _quiche_conn_set_keylog_fd ??= _dylib.lookupFunction<
        _c_quiche_conn_set_keylog_fd,
        _dart_quiche_conn_set_keylog_fd>('quiche_conn_set_keylog_fd');
    return _quiche_conn_set_keylog_fd(
      conn,
      fd,
    );
  }

  _dart_quiche_conn_set_keylog_fd _quiche_conn_set_keylog_fd;

  bool quiche_conn_set_qlog_path(
    ffi.Pointer<Connection> conn,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> log_title,
    ffi.Pointer<ffi.Int8> log_desc,
  ) {
    _quiche_conn_set_qlog_path ??= _dylib.lookupFunction<
        _c_quiche_conn_set_qlog_path,
        _dart_quiche_conn_set_qlog_path>('quiche_conn_set_qlog_path');
    return _quiche_conn_set_qlog_path(
          conn,
          path,
          log_title,
          log_desc,
        ) !=
        0;
  }

  _dart_quiche_conn_set_qlog_path _quiche_conn_set_qlog_path;

  void quiche_conn_set_qlog_fd(
    ffi.Pointer<Connection> conn,
    int fd,
    ffi.Pointer<ffi.Int8> log_title,
    ffi.Pointer<ffi.Int8> log_desc,
  ) {
    _quiche_conn_set_qlog_fd ??= _dylib.lookupFunction<
        _c_quiche_conn_set_qlog_fd,
        _dart_quiche_conn_set_qlog_fd>('quiche_conn_set_qlog_fd');
    return _quiche_conn_set_qlog_fd(
      conn,
      fd,
      log_title,
      log_desc,
    );
  }

  _dart_quiche_conn_set_qlog_fd _quiche_conn_set_qlog_fd;

  int quiche_conn_recv(
    ffi.Pointer<Connection> conn,
    ffi.Pointer<ffi.Uint8> buf,
    int buf_len,
  ) {
    _quiche_conn_recv ??=
        _dylib.lookupFunction<_c_quiche_conn_recv, _dart_quiche_conn_recv>(
            'quiche_conn_recv');
    return _quiche_conn_recv(
      conn,
      buf,
      buf_len,
    );
  }

  _dart_quiche_conn_recv _quiche_conn_recv;

  int quiche_conn_send(
    ffi.Pointer<Connection> conn,
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
  ) {
    _quiche_conn_send ??=
        _dylib.lookupFunction<_c_quiche_conn_send, _dart_quiche_conn_send>(
            'quiche_conn_send');
    return _quiche_conn_send(
      conn,
      out,
      out_len,
    );
  }

  _dart_quiche_conn_send _quiche_conn_send;

  int quiche_conn_stream_recv(
    ffi.Pointer<Connection> conn,
    int stream_id,
    ffi.Pointer<ffi.Uint8> out,
    int buf_len,
    ffi.Pointer<ffi.Uint8> fin,
  ) {
    _quiche_conn_stream_recv ??= _dylib.lookupFunction<
        _c_quiche_conn_stream_recv,
        _dart_quiche_conn_stream_recv>('quiche_conn_stream_recv');
    return _quiche_conn_stream_recv(
      conn,
      stream_id,
      out,
      buf_len,
      fin,
    );
  }

  _dart_quiche_conn_stream_recv _quiche_conn_stream_recv;

  int quiche_conn_stream_send(
    ffi.Pointer<Connection> conn,
    int stream_id,
    ffi.Pointer<ffi.Uint8> buf,
    int buf_len,
    bool fin,
  ) {
    _quiche_conn_stream_send ??= _dylib.lookupFunction<
        _c_quiche_conn_stream_send,
        _dart_quiche_conn_stream_send>('quiche_conn_stream_send');
    return _quiche_conn_stream_send(
      conn,
      stream_id,
      buf,
      buf_len,
      fin ? 1 : 0,
    );
  }

  _dart_quiche_conn_stream_send _quiche_conn_stream_send;

  int quiche_conn_stream_shutdown(
    ffi.Pointer<Connection> conn,
    int stream_id,
    int direction,
    int err,
  ) {
    _quiche_conn_stream_shutdown ??= _dylib.lookupFunction<
        _c_quiche_conn_stream_shutdown,
        _dart_quiche_conn_stream_shutdown>('quiche_conn_stream_shutdown');
    return _quiche_conn_stream_shutdown(
      conn,
      stream_id,
      direction,
      err,
    );
  }

  _dart_quiche_conn_stream_shutdown _quiche_conn_stream_shutdown;

  int quiche_conn_stream_capacity(
    ffi.Pointer<Connection> conn,
    int stream_id,
  ) {
    _quiche_conn_stream_capacity ??= _dylib.lookupFunction<
        _c_quiche_conn_stream_capacity,
        _dart_quiche_conn_stream_capacity>('quiche_conn_stream_capacity');
    return _quiche_conn_stream_capacity(
      conn,
      stream_id,
    );
  }

  _dart_quiche_conn_stream_capacity _quiche_conn_stream_capacity;

  bool quiche_conn_stream_finished(
    ffi.Pointer<Connection> conn,
    int stream_id,
  ) {
    _quiche_conn_stream_finished ??= _dylib.lookupFunction<
        _c_quiche_conn_stream_finished,
        _dart_quiche_conn_stream_finished>('quiche_conn_stream_finished');
    return _quiche_conn_stream_finished(
          conn,
          stream_id,
        ) !=
        0;
  }

  _dart_quiche_conn_stream_finished _quiche_conn_stream_finished;

  ffi.Pointer<StreamIter> quiche_conn_readable(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_readable ??= _dylib.lookupFunction<_c_quiche_conn_readable,
        _dart_quiche_conn_readable>('quiche_conn_readable');
    return _quiche_conn_readable(
      conn,
    );
  }

  _dart_quiche_conn_readable _quiche_conn_readable;

  ffi.Pointer<StreamIter> quiche_conn_writable(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_writable ??= _dylib.lookupFunction<_c_quiche_conn_writable,
        _dart_quiche_conn_writable>('quiche_conn_writable');
    return _quiche_conn_writable(
      conn,
    );
  }

  _dart_quiche_conn_writable _quiche_conn_writable;

  int quiche_conn_timeout_as_nanos(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_timeout_as_nanos ??= _dylib.lookupFunction<
        _c_quiche_conn_timeout_as_nanos,
        _dart_quiche_conn_timeout_as_nanos>('quiche_conn_timeout_as_nanos');
    return _quiche_conn_timeout_as_nanos(
      conn,
    );
  }

  _dart_quiche_conn_timeout_as_nanos _quiche_conn_timeout_as_nanos;

  int quiche_conn_timeout_as_millis(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_timeout_as_millis ??= _dylib.lookupFunction<
        _c_quiche_conn_timeout_as_millis,
        _dart_quiche_conn_timeout_as_millis>('quiche_conn_timeout_as_millis');
    return _quiche_conn_timeout_as_millis(
      conn,
    );
  }

  _dart_quiche_conn_timeout_as_millis _quiche_conn_timeout_as_millis;

  void quiche_conn_on_timeout(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_on_timeout ??= _dylib.lookupFunction<_c_quiche_conn_on_timeout,
        _dart_quiche_conn_on_timeout>('quiche_conn_on_timeout');
    return _quiche_conn_on_timeout(
      conn,
    );
  }

  _dart_quiche_conn_on_timeout _quiche_conn_on_timeout;

  int quiche_conn_close(
    ffi.Pointer<Connection> conn,
    bool app,
    int err,
    ffi.Pointer<ffi.Uint8> reason,
    int reason_len,
  ) {
    _quiche_conn_close ??=
        _dylib.lookupFunction<_c_quiche_conn_close, _dart_quiche_conn_close>(
            'quiche_conn_close');
    return _quiche_conn_close(
      conn,
      app ? 1 : 0,
      err,
      reason,
      reason_len,
    );
  }

  _dart_quiche_conn_close _quiche_conn_close;

  void quiche_conn_application_proto(
    ffi.Pointer<Connection> conn,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out,
    ffi.Pointer<ffi.Uint64> out_len,
  ) {
    _quiche_conn_application_proto ??= _dylib.lookupFunction<
        _c_quiche_conn_application_proto,
        _dart_quiche_conn_application_proto>('quiche_conn_application_proto');
    return _quiche_conn_application_proto(
      conn,
      out,
      out_len,
    );
  }

  _dart_quiche_conn_application_proto _quiche_conn_application_proto;

  bool quiche_conn_is_established(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_is_established ??= _dylib.lookupFunction<
        _c_quiche_conn_is_established,
        _dart_quiche_conn_is_established>('quiche_conn_is_established');
    return _quiche_conn_is_established(
          conn,
        ) !=
        0;
  }

  _dart_quiche_conn_is_established _quiche_conn_is_established;

  bool quiche_conn_is_in_early_data(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_is_in_early_data ??= _dylib.lookupFunction<
        _c_quiche_conn_is_in_early_data,
        _dart_quiche_conn_is_in_early_data>('quiche_conn_is_in_early_data');
    return _quiche_conn_is_in_early_data(
          conn,
        ) !=
        0;
  }

  _dart_quiche_conn_is_in_early_data _quiche_conn_is_in_early_data;

  bool quiche_conn_is_closed(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_is_closed ??= _dylib.lookupFunction<_c_quiche_conn_is_closed,
        _dart_quiche_conn_is_closed>('quiche_conn_is_closed');
    return _quiche_conn_is_closed(
          conn,
        ) !=
        0;
  }

  _dart_quiche_conn_is_closed _quiche_conn_is_closed;

  int quiche_conn_stream_init_application_data(
    ffi.Pointer<Connection> conn,
    int stream_id,
    ffi.Pointer<ffi.Void> data,
  ) {
    _quiche_conn_stream_init_application_data ??= _dylib.lookupFunction<
            _c_quiche_conn_stream_init_application_data,
            _dart_quiche_conn_stream_init_application_data>(
        'quiche_conn_stream_init_application_data');
    return _quiche_conn_stream_init_application_data(
      conn,
      stream_id,
      data,
    );
  }

  _dart_quiche_conn_stream_init_application_data
      _quiche_conn_stream_init_application_data;

  ffi.Pointer<ffi.Void> quiche_conn_stream_application_data(
    ffi.Pointer<Connection> conn,
    int stream_id,
  ) {
    _quiche_conn_stream_application_data ??= _dylib.lookupFunction<
            _c_quiche_conn_stream_application_data,
            _dart_quiche_conn_stream_application_data>(
        'quiche_conn_stream_application_data');
    return _quiche_conn_stream_application_data(
      conn,
      stream_id,
    );
  }

  _dart_quiche_conn_stream_application_data
      _quiche_conn_stream_application_data;

  bool quiche_stream_iter_next(
    ffi.Pointer<StreamIter> iter,
    ffi.Pointer<ffi.Uint64> stream_id,
  ) {
    _quiche_stream_iter_next ??= _dylib.lookupFunction<
        _c_quiche_stream_iter_next,
        _dart_quiche_stream_iter_next>('quiche_stream_iter_next');
    return _quiche_stream_iter_next(
          iter,
          stream_id,
        ) !=
        0;
  }

  _dart_quiche_stream_iter_next _quiche_stream_iter_next;

  void quiche_stream_iter_free(
    ffi.Pointer<StreamIter> iter,
  ) {
    _quiche_stream_iter_free ??= _dylib.lookupFunction<
        _c_quiche_stream_iter_free,
        _dart_quiche_stream_iter_free>('quiche_stream_iter_free');
    return _quiche_stream_iter_free(
      iter,
    );
  }

  _dart_quiche_stream_iter_free _quiche_stream_iter_free;

  void quiche_conn_stats(
    ffi.Pointer<Connection> conn,
    ffi.Pointer<quiche_stats> out,
  ) {
    _quiche_conn_stats ??=
        _dylib.lookupFunction<_c_quiche_conn_stats, _dart_quiche_conn_stats>(
            'quiche_conn_stats');
    return _quiche_conn_stats(
      conn,
      out,
    );
  }

  _dart_quiche_conn_stats _quiche_conn_stats;

  void quiche_conn_free(
    ffi.Pointer<Connection> conn,
  ) {
    _quiche_conn_free ??=
        _dylib.lookupFunction<_c_quiche_conn_free, _dart_quiche_conn_free>(
            'quiche_conn_free');
    return _quiche_conn_free(
      conn,
    );
  }

  _dart_quiche_conn_free _quiche_conn_free;

  ffi.Pointer<Http3Config> quiche_h3_config_new() {
    _quiche_h3_config_new ??= _dylib.lookupFunction<_c_quiche_h3_config_new,
        _dart_quiche_h3_config_new>('quiche_h3_config_new');
    return _quiche_h3_config_new();
  }

  _dart_quiche_h3_config_new _quiche_h3_config_new;

  void quiche_h3_config_set_max_header_list_size(
    ffi.Pointer<Http3Config> config,
    int v,
  ) {
    _quiche_h3_config_set_max_header_list_size ??= _dylib.lookupFunction<
            _c_quiche_h3_config_set_max_header_list_size,
            _dart_quiche_h3_config_set_max_header_list_size>(
        'quiche_h3_config_set_max_header_list_size');
    return _quiche_h3_config_set_max_header_list_size(
      config,
      v,
    );
  }

  _dart_quiche_h3_config_set_max_header_list_size
      _quiche_h3_config_set_max_header_list_size;

  void quiche_h3_config_set_qpack_max_table_capacity(
    ffi.Pointer<Http3Config> config,
    int v,
  ) {
    _quiche_h3_config_set_qpack_max_table_capacity ??= _dylib.lookupFunction<
            _c_quiche_h3_config_set_qpack_max_table_capacity,
            _dart_quiche_h3_config_set_qpack_max_table_capacity>(
        'quiche_h3_config_set_qpack_max_table_capacity');
    return _quiche_h3_config_set_qpack_max_table_capacity(
      config,
      v,
    );
  }

  _dart_quiche_h3_config_set_qpack_max_table_capacity
      _quiche_h3_config_set_qpack_max_table_capacity;

  void quiche_h3_config_set_qpack_blocked_streams(
    ffi.Pointer<Http3Config> config,
    int v,
  ) {
    _quiche_h3_config_set_qpack_blocked_streams ??= _dylib.lookupFunction<
            _c_quiche_h3_config_set_qpack_blocked_streams,
            _dart_quiche_h3_config_set_qpack_blocked_streams>(
        'quiche_h3_config_set_qpack_blocked_streams');
    return _quiche_h3_config_set_qpack_blocked_streams(
      config,
      v,
    );
  }

  _dart_quiche_h3_config_set_qpack_blocked_streams
      _quiche_h3_config_set_qpack_blocked_streams;

  void quiche_h3_config_free(
    ffi.Pointer<Http3Config> config,
  ) {
    _quiche_h3_config_free ??= _dylib.lookupFunction<_c_quiche_h3_config_free,
        _dart_quiche_h3_config_free>('quiche_h3_config_free');
    return _quiche_h3_config_free(
      config,
    );
  }

  _dart_quiche_h3_config_free _quiche_h3_config_free;

  ffi.Pointer<Http3Connection> quiche_h3_accept(
    ffi.Pointer<Connection> quiche_conn,
    ffi.Pointer<Http3Config> config,
  ) {
    _quiche_h3_accept ??=
        _dylib.lookupFunction<_c_quiche_h3_accept, _dart_quiche_h3_accept>(
            'quiche_h3_accept');
    return _quiche_h3_accept(
      quiche_conn,
      config,
    );
  }

  _dart_quiche_h3_accept _quiche_h3_accept;

  ffi.Pointer<Http3Connection> quiche_h3_conn_new_with_transport(
    ffi.Pointer<Connection> quiche_conn,
    ffi.Pointer<Http3Config> config,
  ) {
    _quiche_h3_conn_new_with_transport ??= _dylib.lookupFunction<
            _c_quiche_h3_conn_new_with_transport,
            _dart_quiche_h3_conn_new_with_transport>(
        'quiche_h3_conn_new_with_transport');
    return _quiche_h3_conn_new_with_transport(
      quiche_conn,
      config,
    );
  }

  _dart_quiche_h3_conn_new_with_transport _quiche_h3_conn_new_with_transport;

  int quiche_h3_conn_poll(
    ffi.Pointer<Http3Connection> conn,
    ffi.Pointer<Connection> quic_conn,
    ffi.Pointer<ffi.Pointer<Http3Event>> ev,
  ) {
    _quiche_h3_conn_poll ??= _dylib.lookupFunction<_c_quiche_h3_conn_poll,
        _dart_quiche_h3_conn_poll>('quiche_h3_conn_poll');
    return _quiche_h3_conn_poll(
      conn,
      quic_conn,
      ev,
    );
  }

  _dart_quiche_h3_conn_poll _quiche_h3_conn_poll;

  int quiche_h3_event_type(
    ffi.Pointer<Http3Event> ev,
  ) {
    _quiche_h3_event_type ??= _dylib.lookupFunction<_c_quiche_h3_event_type,
        _dart_quiche_h3_event_type>('quiche_h3_event_type');
    return _quiche_h3_event_type(
      ev,
    );
  }

  _dart_quiche_h3_event_type _quiche_h3_event_type;

  int quiche_h3_event_for_each_header(
    ffi.Pointer<Http3Event> ev,
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> cb,
    ffi.Pointer<ffi.Void> argp,
  ) {
    _quiche_h3_event_for_each_header ??= _dylib.lookupFunction<
            _c_quiche_h3_event_for_each_header,
            _dart_quiche_h3_event_for_each_header>(
        'quiche_h3_event_for_each_header');
    return _quiche_h3_event_for_each_header(
      ev,
      cb,
      argp,
    );
  }

  _dart_quiche_h3_event_for_each_header _quiche_h3_event_for_each_header;

  bool quiche_h3_event_headers_has_body(
    ffi.Pointer<Http3Event> ev,
  ) {
    _quiche_h3_event_headers_has_body ??= _dylib.lookupFunction<
            _c_quiche_h3_event_headers_has_body,
            _dart_quiche_h3_event_headers_has_body>(
        'quiche_h3_event_headers_has_body');
    return _quiche_h3_event_headers_has_body(
          ev,
        ) !=
        0;
  }

  _dart_quiche_h3_event_headers_has_body _quiche_h3_event_headers_has_body;

  void quiche_h3_event_free(
    ffi.Pointer<Http3Event> ev,
  ) {
    _quiche_h3_event_free ??= _dylib.lookupFunction<_c_quiche_h3_event_free,
        _dart_quiche_h3_event_free>('quiche_h3_event_free');
    return _quiche_h3_event_free(
      ev,
    );
  }

  _dart_quiche_h3_event_free _quiche_h3_event_free;

  int quiche_h3_send_request(
    ffi.Pointer<Http3Connection> conn,
    ffi.Pointer<Connection> quic_conn,
    ffi.Pointer<quiche_h3_header> headers,
    int headers_len,
    bool fin,
  ) {
    _quiche_h3_send_request ??= _dylib.lookupFunction<_c_quiche_h3_send_request,
        _dart_quiche_h3_send_request>('quiche_h3_send_request');
    return _quiche_h3_send_request(
      conn,
      quic_conn,
      headers,
      headers_len,
      fin ? 1 : 0,
    );
  }

  _dart_quiche_h3_send_request _quiche_h3_send_request;

  int quiche_h3_send_response(
    ffi.Pointer<Http3Connection> conn,
    ffi.Pointer<Connection> quic_conn,
    int stream_id,
    ffi.Pointer<quiche_h3_header> headers,
    int headers_len,
    bool fin,
  ) {
    _quiche_h3_send_response ??= _dylib.lookupFunction<
        _c_quiche_h3_send_response,
        _dart_quiche_h3_send_response>('quiche_h3_send_response');
    return _quiche_h3_send_response(
      conn,
      quic_conn,
      stream_id,
      headers,
      headers_len,
      fin ? 1 : 0,
    );
  }

  _dart_quiche_h3_send_response _quiche_h3_send_response;

  int quiche_h3_send_response_with_priority(
    ffi.Pointer<Http3Connection> conn,
    ffi.Pointer<Connection> quic_conn,
    int stream_id,
    ffi.Pointer<quiche_h3_header> headers,
    int headers_len,
    ffi.Pointer<ffi.Int8> priority,
    bool fin,
  ) {
    _quiche_h3_send_response_with_priority ??= _dylib.lookupFunction<
            _c_quiche_h3_send_response_with_priority,
            _dart_quiche_h3_send_response_with_priority>(
        'quiche_h3_send_response_with_priority');
    return _quiche_h3_send_response_with_priority(
      conn,
      quic_conn,
      stream_id,
      headers,
      headers_len,
      priority,
      fin ? 1 : 0,
    );
  }

  _dart_quiche_h3_send_response_with_priority
      _quiche_h3_send_response_with_priority;

  int quiche_h3_send_body(
    ffi.Pointer<Http3Connection> conn,
    ffi.Pointer<Connection> quic_conn,
    int stream_id,
    ffi.Pointer<ffi.Uint8> body,
    int body_len,
    bool fin,
  ) {
    _quiche_h3_send_body ??= _dylib.lookupFunction<_c_quiche_h3_send_body,
        _dart_quiche_h3_send_body>('quiche_h3_send_body');
    return _quiche_h3_send_body(
      conn,
      quic_conn,
      stream_id,
      body,
      body_len,
      fin ? 1 : 0,
    );
  }

  _dart_quiche_h3_send_body _quiche_h3_send_body;

  int quiche_h3_recv_body(
    ffi.Pointer<Http3Connection> conn,
    ffi.Pointer<Connection> quic_conn,
    int stream_id,
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
  ) {
    _quiche_h3_recv_body ??= _dylib.lookupFunction<_c_quiche_h3_recv_body,
        _dart_quiche_h3_recv_body>('quiche_h3_recv_body');
    return _quiche_h3_recv_body(
      conn,
      quic_conn,
      stream_id,
      out,
      out_len,
    );
  }

  _dart_quiche_h3_recv_body _quiche_h3_recv_body;

  void quiche_h3_conn_free(
    ffi.Pointer<Http3Connection> conn,
  ) {
    _quiche_h3_conn_free ??= _dylib.lookupFunction<_c_quiche_h3_conn_free,
        _dart_quiche_h3_conn_free>('quiche_h3_conn_free');
    return _quiche_h3_conn_free(
      conn,
    );
  }

  _dart_quiche_h3_conn_free _quiche_h3_conn_free;
}

class __fsid_t extends ffi.Struct {}

class max_align_t extends ffi.Struct {}

class __sigset_t extends ffi.Struct {}

class timeval extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class fd_set extends ffi.Struct {}

class __pthread_list_t extends ffi.Struct {
  ffi.Pointer<__pthread_list_t> __prev;

  ffi.Pointer<__pthread_list_t> __next;
}

class __pthread_slist_t extends ffi.Struct {
  ffi.Pointer<__pthread_slist_t> __next;
}

class __pthread_mutex_s extends ffi.Struct {}

class __pthread_rwlock_arch_t extends ffi.Struct {}

class __pthread_cond_s extends ffi.Struct {}

abstract class quiche_error {
  static const int QUICHE_ERR_DONE = -1;
  static const int QUICHE_ERR_BUFFER_TOO_SHORT = -2;
  static const int QUICHE_ERR_UNKNOWN_VERSION = -3;
  static const int QUICHE_ERR_INVALID_FRAME = -4;
  static const int QUICHE_ERR_INVALID_PACKET = -5;
  static const int QUICHE_ERR_INVALID_STATE = -6;
  static const int QUICHE_ERR_INVALID_STREAM_STATE = -7;
  static const int QUICHE_ERR_INVALID_TRANSPORT_PARAM = -8;
  static const int QUICHE_ERR_CRYPTO_FAIL = -9;
  static const int QUICHE_ERR_TLS_FAIL = -10;
  static const int QUICHE_ERR_FLOW_CONTROL = -11;
  static const int QUICHE_ERR_STREAM_LIMIT = -12;
  static const int QUICHE_ERR_FINAL_SIZE = -13;
  static const int QUICHE_ERR_CONGESTION_CONTROL = -14;
}

class Config extends ffi.Struct {}

abstract class quiche_cc_algorithm {
  static const int QUICHE_CC_RENO = 0;
  static const int QUICHE_CC_CUBIC = 1;
}

class Connection extends ffi.Struct {}

class RangeBuf extends ffi.Struct {}

abstract class quiche_shutdown {
  static const int QUICHE_SHUTDOWN_READ = 0;
  static const int QUICHE_SHUTDOWN_WRITE = 1;
}

class StreamIter extends ffi.Struct {}

class quiche_stats extends ffi.Struct {
  @ffi.Uint64()
  int recv;

  @ffi.Uint64()
  int sent;

  @ffi.Uint64()
  int lost;

  @ffi.Uint64()
  int rtt;

  @ffi.Uint64()
  int cwnd;

  @ffi.Uint64()
  int delivery_rate;
}

abstract class quiche_h3_error {
  /// /// There is no error or no work to do
  static const int QUICHE_H3_ERR_DONE = -1;

  /// /// The provided buffer is too short.
  static const int QUICHE_H3_ERR_BUFFER_TOO_SHORT = -2;

  /// /// Internal error in the HTTP/3 stack.
  static const int QUICHE_H3_ERR_INTERNAL_ERROR = -3;

  /// /// Endpoint detected that the peer is exhibiting behavior that causes.
  /// /// excessive load.
  static const int QUICHE_H3_ERR_EXCESSIVE_LOAD = -4;

  /// /// Stream ID or Push ID greater that current maximum was
  /// /// used incorrectly, such as exceeding a limit, reducing a limit,
  /// /// or being reused.
  static const int QUICHE_H3_ERR_ID_ERROR = -5;

  /// /// The endpoint detected that its peer created a stream that it will not
  /// /// accept.
  static const int QUICHE_H3_ERR_STREAM_CREATION_ERROR = -6;

  /// /// A required critical stream was closed.
  static const int QUICHE_H3_ERR_CLOSED_CRITICAL_STREAM = -7;

  /// /// No SETTINGS frame at beginning of control stream.
  static const int QUICHE_H3_ERR_MISSING_SETTINGS = -8;

  /// /// A frame was received which is not permitted in the current state.
  static const int QUICHE_H3_ERR_FRAME_UNEXPECTED = -9;

  /// /// Frame violated layout or size rules.
  static const int QUICHE_H3_ERR_FRAME_ERROR = -10;

  /// /// QPACK Header block decompression failure.
  static const int QUICHE_H3_ERR_QPACK_DECOMPRESSION_FAILED = -11;

  /// /// Error originated from the transport layer.
  static const int QUICHE_H3_ERR_TRANSPORT_ERROR = -12;

  /// /// The underlying QUIC stream (or connection) doesn't have enough capacity
  /// /// for the operation to complete. The application should retry later on.
  static const int QUICHE_H3_ERR_STREAM_BLOCKED = -13;
}

class Http3Config extends ffi.Struct {}

class Http3Connection extends ffi.Struct {}

abstract class quiche_h3_event_type {
  static const int QUICHE_H3_EVENT_HEADERS = 0;
  static const int QUICHE_H3_EVENT_DATA = 1;
  static const int QUICHE_H3_EVENT_FINISHED = 2;
}

class Http3Event extends ffi.Struct {}

class quiche_h3_header extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> name;

  @ffi.Uint64()
  int name_len;

  ffi.Pointer<ffi.Uint8> value;

  @ffi.Uint64()
  int value_len;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int true_1 = 1;

const int false_1 = 0;

const int __bool_true_false_are_defined = 1;

const int NULL = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const String __FD_ZERO_STOS = 'stosq';

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int QUICHE_PROTOCOL_VERSION = 4278190109;

const int QUICHE_MAX_CONN_ID_LEN = 20;

const int QUICHE_MIN_CLIENT_INITIAL_LEN = 1200;

const String QUICHE_H3_APPLICATION_PROTOCOL = 'h3-29h3-28h3-27';

typedef _c___bswap_16 = ffi.Uint16 Function(
  ffi.Uint16 __bsx,
);

typedef _dart___bswap_16 = int Function(
  int __bsx,
);

typedef _c___bswap_32 = ffi.Uint32 Function(
  ffi.Uint32 __bsx,
);

typedef _dart___bswap_32 = int Function(
  int __bsx,
);

typedef _c___bswap_64 = ffi.Uint64 Function(
  ffi.Uint64 __bsx,
);

typedef _dart___bswap_64 = int Function(
  int __bsx,
);

typedef _c___uint16_identity = ffi.Uint16 Function(
  ffi.Uint16 __x,
);

typedef _dart___uint16_identity = int Function(
  int __x,
);

typedef _c___uint32_identity = ffi.Uint32 Function(
  ffi.Uint32 __x,
);

typedef _dart___uint32_identity = int Function(
  int __x,
);

typedef _c___uint64_identity = ffi.Uint64 Function(
  ffi.Uint64 __x,
);

typedef _dart___uint64_identity = int Function(
  int __x,
);

typedef _c_select = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _dart_select = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _c_pselect = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _dart_pselect = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _c_quiche_version = ffi.Pointer<ffi.Int8> Function();

typedef _dart_quiche_version = ffi.Pointer<ffi.Int8> Function();

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_quiche_enable_debug_logging = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> cb,
  ffi.Pointer<ffi.Void> argp,
);

typedef _dart_quiche_enable_debug_logging = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> cb,
  ffi.Pointer<ffi.Void> argp,
);

typedef _c_quiche_config_new = ffi.Pointer<Config> Function(
  ffi.Uint32 version,
);

typedef _dart_quiche_config_new = ffi.Pointer<Config> Function(
  int version,
);

typedef _c_quiche_config_load_cert_chain_from_pem_file = ffi.Int32 Function(
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_quiche_config_load_cert_chain_from_pem_file = int Function(
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_quiche_config_load_priv_key_from_pem_file = ffi.Int32 Function(
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_quiche_config_load_priv_key_from_pem_file = int Function(
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_quiche_config_verify_peer = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint8 v,
);

typedef _dart_quiche_config_verify_peer = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_grease = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint8 v,
);

typedef _dart_quiche_config_grease = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_log_keys = ffi.Void Function(
  ffi.Pointer<Config> config,
);

typedef _dart_quiche_config_log_keys = void Function(
  ffi.Pointer<Config> config,
);

typedef _c_quiche_config_enable_early_data = ffi.Void Function(
  ffi.Pointer<Config> config,
);

typedef _dart_quiche_config_enable_early_data = void Function(
  ffi.Pointer<Config> config,
);

typedef _c_quiche_config_set_application_protos = ffi.Int32 Function(
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Uint8> protos,
  ffi.Uint64 protos_len,
);

typedef _dart_quiche_config_set_application_protos = int Function(
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Uint8> protos,
  int protos_len,
);

typedef _c_quiche_config_set_max_idle_timeout = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_max_idle_timeout = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_max_udp_payload_size = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_max_udp_payload_size = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_initial_max_data = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_initial_max_data = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_initial_max_stream_data_bidi_local = ffi.Void
    Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_initial_max_stream_data_bidi_local = void
    Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_initial_max_stream_data_bidi_remote = ffi.Void
    Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_initial_max_stream_data_bidi_remote = void
    Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_initial_max_stream_data_uni = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_initial_max_stream_data_uni = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_initial_max_streams_bidi = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_initial_max_streams_bidi = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_initial_max_streams_uni = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_initial_max_streams_uni = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_ack_delay_exponent = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_ack_delay_exponent = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_max_ack_delay = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_config_set_max_ack_delay = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_disable_active_migration = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint8 v,
);

typedef _dart_quiche_config_set_disable_active_migration = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_set_cc_algorithm = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Int32 algo,
);

typedef _dart_quiche_config_set_cc_algorithm = void Function(
  ffi.Pointer<Config> config,
  int algo,
);

typedef _c_quiche_config_enable_hystart = ffi.Void Function(
  ffi.Pointer<Config> config,
  ffi.Uint8 v,
);

typedef _dart_quiche_config_enable_hystart = void Function(
  ffi.Pointer<Config> config,
  int v,
);

typedef _c_quiche_config_free = ffi.Void Function(
  ffi.Pointer<Config> config,
);

typedef _dart_quiche_config_free = void Function(
  ffi.Pointer<Config> config,
);

typedef _c_quiche_header_info = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Uint64 buf_len,
  ffi.Uint64 dcil,
  ffi.Pointer<ffi.Uint32> version,
  ffi.Pointer<ffi.Uint8> type,
  ffi.Pointer<ffi.Uint8> scid,
  ffi.Pointer<ffi.Uint64> scid_len,
  ffi.Pointer<ffi.Uint8> dcid,
  ffi.Pointer<ffi.Uint64> dcid_len,
  ffi.Pointer<ffi.Uint8> token,
  ffi.Pointer<ffi.Uint64> token_len,
);

typedef _dart_quiche_header_info = int Function(
  ffi.Pointer<ffi.Uint8> buf,
  int buf_len,
  int dcil,
  ffi.Pointer<ffi.Uint32> version,
  ffi.Pointer<ffi.Uint8> type,
  ffi.Pointer<ffi.Uint8> scid,
  ffi.Pointer<ffi.Uint64> scid_len,
  ffi.Pointer<ffi.Uint8> dcid,
  ffi.Pointer<ffi.Uint64> dcid_len,
  ffi.Pointer<ffi.Uint8> token,
  ffi.Pointer<ffi.Uint64> token_len,
);

typedef _c_quiche_accept = ffi.Pointer<Connection> Function(
  ffi.Pointer<ffi.Uint8> scid,
  ffi.Uint64 scid_len,
  ffi.Pointer<ffi.Uint8> odcid,
  ffi.Uint64 odcid_len,
  ffi.Pointer<Config> config,
);

typedef _dart_quiche_accept = ffi.Pointer<Connection> Function(
  ffi.Pointer<ffi.Uint8> scid,
  int scid_len,
  ffi.Pointer<ffi.Uint8> odcid,
  int odcid_len,
  ffi.Pointer<Config> config,
);

typedef _c_quiche_connect = ffi.Pointer<Connection> Function(
  ffi.Pointer<ffi.Int8> server_name,
  ffi.Pointer<ffi.Uint8> scid,
  ffi.Uint64 scid_len,
  ffi.Pointer<Config> config,
);

typedef _dart_quiche_connect = ffi.Pointer<Connection> Function(
  ffi.Pointer<ffi.Int8> server_name,
  ffi.Pointer<ffi.Uint8> scid,
  int scid_len,
  ffi.Pointer<Config> config,
);

typedef _c_quiche_negotiate_version = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint8> scid,
  ffi.Uint64 scid_len,
  ffi.Pointer<ffi.Uint8> dcid,
  ffi.Uint64 dcid_len,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 out_len,
);

typedef _dart_quiche_negotiate_version = int Function(
  ffi.Pointer<ffi.Uint8> scid,
  int scid_len,
  ffi.Pointer<ffi.Uint8> dcid,
  int dcid_len,
  ffi.Pointer<ffi.Uint8> out,
  int out_len,
);

typedef _c_quiche_retry = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint8> scid,
  ffi.Uint64 scid_len,
  ffi.Pointer<ffi.Uint8> dcid,
  ffi.Uint64 dcid_len,
  ffi.Pointer<ffi.Uint8> new_scid,
  ffi.Uint64 new_scid_len,
  ffi.Pointer<ffi.Uint8> token,
  ffi.Uint64 token_len,
  ffi.Uint32 version,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 out_len,
);

typedef _dart_quiche_retry = int Function(
  ffi.Pointer<ffi.Uint8> scid,
  int scid_len,
  ffi.Pointer<ffi.Uint8> dcid,
  int dcid_len,
  ffi.Pointer<ffi.Uint8> new_scid,
  int new_scid_len,
  ffi.Pointer<ffi.Uint8> token,
  int token_len,
  int version,
  ffi.Pointer<ffi.Uint8> out,
  int out_len,
);

typedef _c_quiche_version_is_supported = ffi.Uint8 Function(
  ffi.Uint32 version,
);

typedef _dart_quiche_version_is_supported = int Function(
  int version,
);

typedef _c_quiche_conn_new_with_tls = ffi.Pointer<Connection> Function(
  ffi.Pointer<ffi.Uint8> scid,
  ffi.Uint64 scid_len,
  ffi.Pointer<ffi.Uint8> odcid,
  ffi.Uint64 odcid_len,
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Void> ssl,
  ffi.Uint8 is_server,
);

typedef _dart_quiche_conn_new_with_tls = ffi.Pointer<Connection> Function(
  ffi.Pointer<ffi.Uint8> scid,
  int scid_len,
  ffi.Pointer<ffi.Uint8> odcid,
  int odcid_len,
  ffi.Pointer<Config> config,
  ffi.Pointer<ffi.Void> ssl,
  int is_server,
);

typedef _c_quiche_conn_set_keylog_path = ffi.Uint8 Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_quiche_conn_set_keylog_path = int Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_quiche_conn_set_keylog_fd = ffi.Void Function(
  ffi.Pointer<Connection> conn,
  ffi.Int32 fd,
);

typedef _dart_quiche_conn_set_keylog_fd = void Function(
  ffi.Pointer<Connection> conn,
  int fd,
);

typedef _c_quiche_conn_set_qlog_path = ffi.Uint8 Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> log_title,
  ffi.Pointer<ffi.Int8> log_desc,
);

typedef _dart_quiche_conn_set_qlog_path = int Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> log_title,
  ffi.Pointer<ffi.Int8> log_desc,
);

typedef _c_quiche_conn_set_qlog_fd = ffi.Void Function(
  ffi.Pointer<Connection> conn,
  ffi.Int32 fd,
  ffi.Pointer<ffi.Int8> log_title,
  ffi.Pointer<ffi.Int8> log_desc,
);

typedef _dart_quiche_conn_set_qlog_fd = void Function(
  ffi.Pointer<Connection> conn,
  int fd,
  ffi.Pointer<ffi.Int8> log_title,
  ffi.Pointer<ffi.Int8> log_desc,
);

typedef _c_quiche_conn_recv = ffi.Int64 Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Uint64 buf_len,
);

typedef _dart_quiche_conn_recv = int Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Uint8> buf,
  int buf_len,
);

typedef _c_quiche_conn_send = ffi.Int64 Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 out_len,
);

typedef _dart_quiche_conn_send = int Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Uint8> out,
  int out_len,
);

typedef _c_quiche_conn_stream_recv = ffi.Int64 Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint64 stream_id,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 buf_len,
  ffi.Pointer<ffi.Uint8> fin,
);

typedef _dart_quiche_conn_stream_recv = int Function(
  ffi.Pointer<Connection> conn,
  int stream_id,
  ffi.Pointer<ffi.Uint8> out,
  int buf_len,
  ffi.Pointer<ffi.Uint8> fin,
);

typedef _c_quiche_conn_stream_send = ffi.Int64 Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint64 stream_id,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Uint64 buf_len,
  ffi.Uint8 fin,
);

typedef _dart_quiche_conn_stream_send = int Function(
  ffi.Pointer<Connection> conn,
  int stream_id,
  ffi.Pointer<ffi.Uint8> buf,
  int buf_len,
  int fin,
);

typedef _c_quiche_conn_stream_shutdown = ffi.Int32 Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint64 stream_id,
  ffi.Int32 direction,
  ffi.Uint64 err,
);

typedef _dart_quiche_conn_stream_shutdown = int Function(
  ffi.Pointer<Connection> conn,
  int stream_id,
  int direction,
  int err,
);

typedef _c_quiche_conn_stream_capacity = ffi.Int64 Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint64 stream_id,
);

typedef _dart_quiche_conn_stream_capacity = int Function(
  ffi.Pointer<Connection> conn,
  int stream_id,
);

typedef _c_quiche_conn_stream_finished = ffi.Uint8 Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint64 stream_id,
);

typedef _dart_quiche_conn_stream_finished = int Function(
  ffi.Pointer<Connection> conn,
  int stream_id,
);

typedef _c_quiche_conn_readable = ffi.Pointer<StreamIter> Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_readable = ffi.Pointer<StreamIter> Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_writable = ffi.Pointer<StreamIter> Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_writable = ffi.Pointer<StreamIter> Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_timeout_as_nanos = ffi.Uint64 Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_timeout_as_nanos = int Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_timeout_as_millis = ffi.Uint64 Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_timeout_as_millis = int Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_on_timeout = ffi.Void Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_on_timeout = void Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_close = ffi.Int32 Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint8 app,
  ffi.Uint64 err,
  ffi.Pointer<ffi.Uint8> reason,
  ffi.Uint64 reason_len,
);

typedef _dart_quiche_conn_close = int Function(
  ffi.Pointer<Connection> conn,
  int app,
  int err,
  ffi.Pointer<ffi.Uint8> reason,
  int reason_len,
);

typedef _c_quiche_conn_application_proto = ffi.Void Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> out,
  ffi.Pointer<ffi.Uint64> out_len,
);

typedef _dart_quiche_conn_application_proto = void Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> out,
  ffi.Pointer<ffi.Uint64> out_len,
);

typedef _c_quiche_conn_is_established = ffi.Uint8 Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_is_established = int Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_is_in_early_data = ffi.Uint8 Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_is_in_early_data = int Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_is_closed = ffi.Uint8 Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_is_closed = int Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_conn_stream_init_application_data = ffi.Int32 Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint64 stream_id,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_quiche_conn_stream_init_application_data = int Function(
  ffi.Pointer<Connection> conn,
  int stream_id,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_quiche_conn_stream_application_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Connection> conn,
  ffi.Uint64 stream_id,
);

typedef _dart_quiche_conn_stream_application_data = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Connection> conn,
  int stream_id,
);

typedef _c_quiche_stream_iter_next = ffi.Uint8 Function(
  ffi.Pointer<StreamIter> iter,
  ffi.Pointer<ffi.Uint64> stream_id,
);

typedef _dart_quiche_stream_iter_next = int Function(
  ffi.Pointer<StreamIter> iter,
  ffi.Pointer<ffi.Uint64> stream_id,
);

typedef _c_quiche_stream_iter_free = ffi.Void Function(
  ffi.Pointer<StreamIter> iter,
);

typedef _dart_quiche_stream_iter_free = void Function(
  ffi.Pointer<StreamIter> iter,
);

typedef _c_quiche_conn_stats = ffi.Void Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<quiche_stats> out,
);

typedef _dart_quiche_conn_stats = void Function(
  ffi.Pointer<Connection> conn,
  ffi.Pointer<quiche_stats> out,
);

typedef _c_quiche_conn_free = ffi.Void Function(
  ffi.Pointer<Connection> conn,
);

typedef _dart_quiche_conn_free = void Function(
  ffi.Pointer<Connection> conn,
);

typedef _c_quiche_h3_config_new = ffi.Pointer<Http3Config> Function();

typedef _dart_quiche_h3_config_new = ffi.Pointer<Http3Config> Function();

typedef _c_quiche_h3_config_set_max_header_list_size = ffi.Void Function(
  ffi.Pointer<Http3Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_h3_config_set_max_header_list_size = void Function(
  ffi.Pointer<Http3Config> config,
  int v,
);

typedef _c_quiche_h3_config_set_qpack_max_table_capacity = ffi.Void Function(
  ffi.Pointer<Http3Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_h3_config_set_qpack_max_table_capacity = void Function(
  ffi.Pointer<Http3Config> config,
  int v,
);

typedef _c_quiche_h3_config_set_qpack_blocked_streams = ffi.Void Function(
  ffi.Pointer<Http3Config> config,
  ffi.Uint64 v,
);

typedef _dart_quiche_h3_config_set_qpack_blocked_streams = void Function(
  ffi.Pointer<Http3Config> config,
  int v,
);

typedef _c_quiche_h3_config_free = ffi.Void Function(
  ffi.Pointer<Http3Config> config,
);

typedef _dart_quiche_h3_config_free = void Function(
  ffi.Pointer<Http3Config> config,
);

typedef _c_quiche_h3_accept = ffi.Pointer<Http3Connection> Function(
  ffi.Pointer<Connection> quiche_conn,
  ffi.Pointer<Http3Config> config,
);

typedef _dart_quiche_h3_accept = ffi.Pointer<Http3Connection> Function(
  ffi.Pointer<Connection> quiche_conn,
  ffi.Pointer<Http3Config> config,
);

typedef _c_quiche_h3_conn_new_with_transport = ffi.Pointer<Http3Connection>
    Function(
  ffi.Pointer<Connection> quiche_conn,
  ffi.Pointer<Http3Config> config,
);

typedef _dart_quiche_h3_conn_new_with_transport = ffi.Pointer<Http3Connection>
    Function(
  ffi.Pointer<Connection> quiche_conn,
  ffi.Pointer<Http3Config> config,
);

typedef _c_quiche_h3_conn_poll = ffi.Int32 Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Pointer<ffi.Pointer<Http3Event>> ev,
);

typedef _dart_quiche_h3_conn_poll = int Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Pointer<ffi.Pointer<Http3Event>> ev,
);

typedef _c_quiche_h3_event_type = ffi.Int32 Function(
  ffi.Pointer<Http3Event> ev,
);

typedef _dart_quiche_h3_event_type = int Function(
  ffi.Pointer<Http3Event> ev,
);

typedef _typedefC_2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_quiche_h3_event_for_each_header = ffi.Int32 Function(
  ffi.Pointer<Http3Event> ev,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> cb,
  ffi.Pointer<ffi.Void> argp,
);

typedef _dart_quiche_h3_event_for_each_header = int Function(
  ffi.Pointer<Http3Event> ev,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> cb,
  ffi.Pointer<ffi.Void> argp,
);

typedef _c_quiche_h3_event_headers_has_body = ffi.Uint8 Function(
  ffi.Pointer<Http3Event> ev,
);

typedef _dart_quiche_h3_event_headers_has_body = int Function(
  ffi.Pointer<Http3Event> ev,
);

typedef _c_quiche_h3_event_free = ffi.Void Function(
  ffi.Pointer<Http3Event> ev,
);

typedef _dart_quiche_h3_event_free = void Function(
  ffi.Pointer<Http3Event> ev,
);

typedef _c_quiche_h3_send_request = ffi.Int64 Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Pointer<quiche_h3_header> headers,
  ffi.Uint64 headers_len,
  ffi.Uint8 fin,
);

typedef _dart_quiche_h3_send_request = int Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Pointer<quiche_h3_header> headers,
  int headers_len,
  int fin,
);

typedef _c_quiche_h3_send_response = ffi.Int32 Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Uint64 stream_id,
  ffi.Pointer<quiche_h3_header> headers,
  ffi.Uint64 headers_len,
  ffi.Uint8 fin,
);

typedef _dart_quiche_h3_send_response = int Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  int stream_id,
  ffi.Pointer<quiche_h3_header> headers,
  int headers_len,
  int fin,
);

typedef _c_quiche_h3_send_response_with_priority = ffi.Int32 Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Uint64 stream_id,
  ffi.Pointer<quiche_h3_header> headers,
  ffi.Uint64 headers_len,
  ffi.Pointer<ffi.Int8> priority,
  ffi.Uint8 fin,
);

typedef _dart_quiche_h3_send_response_with_priority = int Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  int stream_id,
  ffi.Pointer<quiche_h3_header> headers,
  int headers_len,
  ffi.Pointer<ffi.Int8> priority,
  int fin,
);

typedef _c_quiche_h3_send_body = ffi.Int64 Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Uint64 stream_id,
  ffi.Pointer<ffi.Uint8> body,
  ffi.Uint64 body_len,
  ffi.Uint8 fin,
);

typedef _dart_quiche_h3_send_body = int Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  int stream_id,
  ffi.Pointer<ffi.Uint8> body,
  int body_len,
  int fin,
);

typedef _c_quiche_h3_recv_body = ffi.Int64 Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  ffi.Uint64 stream_id,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 out_len,
);

typedef _dart_quiche_h3_recv_body = int Function(
  ffi.Pointer<Http3Connection> conn,
  ffi.Pointer<Connection> quic_conn,
  int stream_id,
  ffi.Pointer<ffi.Uint8> out,
  int out_len,
);

typedef _c_quiche_h3_conn_free = ffi.Void Function(
  ffi.Pointer<Http3Connection> conn,
);

typedef _dart_quiche_h3_conn_free = void Function(
  ffi.Pointer<Http3Connection> conn,
);
